Define a class that has only one instance and provides a global point of access to it
Singleton patterns are used in logging, caches, thread pools, configuration settings, device driver objects.

Singleton class structure 

Static member :        This contains the instance of the singleton class.
Private constructor :  This will prevent anybody else to instantiate the Singleton class.
Static public method : This provides the global point of access to the Singleton object and returns the instance to the client calling class.
                       
Double check locking for no overhead that happens over entire synchronized block

Singleton vs Static

Singleton can implement interfaces and extend classes while the static class cannot (it can extend classes, but it does not inherit their instance members). 
If we consider a static class it can only be a nested static class as top level class cannot be a static class. 
Static means that it belongs to a class it is in and not to any instance. So it cannot be a top level class.

Static class will have all its member as static only unlike Singleton.

Singleton can be lazily loaded whereas static will be initialized whenever it is first loaded.

Singleton object stores in Heap but, static object stores in stack.

We can clone the object of Singleton but, we can not clone the static class object.

Singleton can use the Object Oriented feature of polymorphism but static class cannot.

**********************USES*******************************
Logging, Cache, Hardware access, single instance of configuration files

*********NOTE****************************8
When we serialize a class and deserialize it then it creates another instance of the singleton class. 
Basically as many times as you deserialize the singleton instance it will create multiple instance. 
Well in this case the best way is to make the singleton as enum. In that way the underlying Java 
implementation takes care of all the details. If this is not possible then we will need to override 
the readobject() method to return the same singleton instance.

java.lang.Runtime : In every Java application there is only one Runtime instance that allows the application 
to interface with the environment it is running. IS AN EXAMPLE OF JAVA SINGLETON.